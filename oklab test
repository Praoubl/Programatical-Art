//from github.com/Evercoder/culori/

const convertOklabToLrgb = function( l, a, b, alpha ) {
	var L = Math.pow(
		l * 0.99999999845051981432 +
			0.39633779217376785678 * a +
			0.21580375806075880339 * b,
		3
	);
	var M = Math.pow(
		l * 1.0000000088817607767 -
			0.1055613423236563494 * a -
			0.063854174771705903402 * b,
		3
	);
	var S = Math.pow(
		l * 1.0000000546724109177 -
			0.089484182094965759684 * a -
			1.2914855378640917399 * b,
		3
	);

	var res = {
		mode: 'lrgb',
		r:
			+4.076741661347994 * L -
			3.307711590408193 * M +
			0.230969928729428 * S,
		g:
			-1.2684380040921763 * L +
			2.6097574006633715 * M -
			0.3413193963102197 * S,
		b:
			-0.004196086541837188 * L -
			0.7034186144594493 * M +
			1.7076147009309444 * S
	};

	if (alpha !== undefined) {
		res.alpha = alpha;
	}

	return res;
};

const fn = function(c){
	const abs = Math.abs(c);
	if (abs > 0.0031308) {
		return (Math.sign(c) || 1) * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);
	}
	return c * 12.92;
};

const convertLrgbToRgb = function( r, g, b, alpha){
	let res = {
		mode: "rgb",
		r: Math.max(fn(r)*256,0),
		g: Math.max(fn(g)*256,0),
		b: Math.max(fn(b)*256,0)
	};
	if (alpha !== undefined) {res.alpha = alpha};
	return res;
};
var mid5={};
var oklabToRgb=function(okl,oka,okb){
  mid5=convertOklabToLrgb(okl,oka,okb);
  return(convertLrgbToRgb(mid5.r,mid5.g,mid5.b));
};
//console.log(oklabToRgb(0.5,0.25,0.25));
var pix1=[0,0,0], pix2=[0.75,0.75,0.75], pix3=[0.5,0.5,0.5];
var i=0;
var j=0;
var k=0;
var t=0;
var p=[];
var h=1;
var s=1;
var mid1=0;
var mid2=0;
var mid3=0;
var mid4=0;
var p1=[1], p2=[1], p3=[1];
var ip;
var cords=[0,0];
var i2=0;
/*for(i=0;i<50;i++){;
  for(j=0;j<50;j++){
    pix.push(0);
    pix.push(0);
    pix.push(0);
  }
}*/
var mid=[];
var smooth1d=function(b){
  mid=b;
  for(i=0;i<b.length-2;i++){
    mid[i+1]=(b[i]+b[i+2])/2;
  };
  return(mid);
};
var smooth2d=function(c,q){
  mid=c;
  for(i=q;i<c.length-q;i++){
    if(q<i<c.length-q-1&&0<i-(Math.floor((i-1)/q)*q)<q-1){
      mid[i]=(c[i-q]+c[i-1]+(96*c[i])+c[i+1]+c[i+q])/100;
    //}else if(0<i-(Math.floor(i/q)*q)<q-1){
      //mid[i]=(c[i-1]+c[i]+c[i+1])/3;
    };
  };
  return(mid);
};
var cscale=1.5;
var hsl2rgb=function(h1,s1,l1){//0 <= inputs <= 1
  mid1=h1*6;
  mid2=s1*(1-Math.abs((2*l1)-1));
  mid3=mid2*(1-Math.abs((mid1%2)-1));
  mid4=1-mid2/2;
  if(mid1<1){
    return([255*(Math.min(1.5,mid2+mid4))/cscale,255*(Math.min(1.5,mid3+mid4))/cscale,255*(mid4)/cscale]);
  }else if(mid1<2){
    return([255*(Math.min(1.5,mid3+mid4))/cscale,255*(Math.min(1.5,mid2+mid4))/cscale,255*(mid4)/cscale]);
  }else if(mid1<3){
    return([255*(mid4)/cscale,255*(Math.min(1.5,mid2+mid4))/cscale,255*(Math.min(1.5,mid3+mid4))/cscale]);
  }else if(mid1<4){
    return([255*(mid4)/cscale,255*(Math.min(1.5,mid3+mid4))/cscale,255*(Math.min(1.5,mid2+mid4))/cscale]);
  }else if(mid1<5){
    return([255*(Math.min(1.5,mid3+mid4))/cscale,255*(mid4)/cscale,255*(Math.min(1.5,mid2+mid4))/cscale]);
  }else{
    return([255*(Math.min(1.5,mid2+mid4))/cscale,255*(mid4)/cscale,255*(Math.min(1.5,mid3+mid4))/cscale]);
  } 
};
{
function invert(point) {
  return {
    x: point.y,
    y: point.x
  };
}
maybeRotate = function(point, iterr,size) {
  if (size) {    
    if (iterr ^ this.log2parity) {
      return invert(point);
    }
  } else {
    if (iterr == 0) {
      return invert(point);
    }
  }
  return point;
};
h2xy = function (d1) {
  d1 = Math.floor(d1);
  var curPos = {
    x: 0,
    y: 0
  };
  var s1 = 1;
  var iterr = 0;
  var size = 0;
  while (d1 > 0 || s1 < size) {
    var ry = 1 & (d1 / 2);
    var rx = 1 & (ry ^ d1);

     // Rotate, if need be
    if (rx == 0) {
      if (ry == 1) {
        curPos = {
          x: s1 - 1 - curPos.x,
          y: s1 - 1 - curPos.y
        };
      }
      curPos = invert(curPos);
    }
    curPos = {
      x: curPos.x + s1 * rx,
      y: curPos.y + s1 * ry
    };
    s1 *= 2;
    d1 = Math.floor(d1 / 4);
    iterr = (iterr + 1) % 2;
  }
  //return(curPos);
  return this.maybeRotate(curPos, iterr,size);
};
}//from github.com/ryan-williams/hilbert-js
var iter=function(a,b,c){
  mid=[[1],[1],[1]];
  for(i=0;i<a.length;i++){
    mid[0][i]=Math.abs((a[i]+0.0001+Math.random()*0.0005))%1;
    mid[1][i]=b[i];
    mid[2][i]=c[i];
  };
  if(a.length<canvas.width*canvas.height/16){
    mid[0][i]=a[i-1];
    mid[1][i]=b[i-1];
    mid[2][i]=c[i-1];
  return(mid);
  };
};
var iter2=function(a,b,c,d){
  mid=[[1],[1],[1]];
  for(i=0;i<a.length;i++){
    mid[0][i]=0.5;
    mid[1][i]=((Math.floor(i/128)/128)-0.5)*0.5;
    mid[2][i]=(((i/128)%1)-0.5)*0.5;
  };
  if(a.length<canvas.width*canvas.height/16){
    mid[0][i]=a[i-1];
    mid[1][i]=b[i-1];
    mid[2][i]=c[i-1];
  return(mid);
  };
};
draw=function(){
  var canvas = document.getElementById('canvas');
  var ctx = canvas.getContext('2d');
  var w=canvas.width/4;
  ctx.clearRect(0,0,canvas.width,canvas.height);
  for(i=0;i<canvas.height/4;i++){
    for(j=0;j<canvas.width/4;j++){
      ip=oklabToRgb((pix1[(i*canvas.width/4+j)]),(pix2[(i*canvas.width/4+j)]),(pix3[(i*canvas.width/4+j)]));
      p1=ip.r;
      p2=ip.g;
      p3=ip.b;
      ctx.fillStyle="rgb(100,101,105)";
      ctx.fillStyle="rgb("+(p1)+","+(p2)+","+(p3)+")";
      //mid=h2xy(i*w+j);
      ctx.fillRect(i*4/*mid.x*4*/,j*4/*mid.y*4*/,4,4);
    };
  };
  if(t<128*128-1){
    /*pix1=iter(pix1);
    pix2=iter(pix2);
    pix3=iter(pix3);*/
    p=iter2(pix1,pix2,pix3,t);
    pix1=p[0];
    pix2=p[1];
    pix3=p[2];
  }else{
    pix1=smooth2d(pix1,w);
    pix2=smooth2d(pix2,w);
    pix3=smooth2d(pix3,w);
  };
  //ctx.fillStyle="rgb(255,0,255)"
  //ctx.font="bold 20px serif";
  //ctx.fillText(pix1[0]+","+pix2[0]+","+pix3[0],10,200);
  //ctx.fillText(hsl2rgb(pix1[0],pix2[0],pix3[0]),10,240);
  //ctx.fillText(hsl2rgb(0,1,0.5),10,280);
  //ctx.fillText(h2xy(20).x+", "+h2xy(20).y,10,280);
  t++;
};
//window.requestAnimationFrame(draw);
var callback1 = setInterval(draw, 20);
